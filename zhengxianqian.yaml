---
swagger: "2.0"
info:
  description: This is an example of using OAuth2 Application Flow in a specification to describe security to your API.
  version: 1.0.0
  title: Sample Application Flow OAuth2 Project
host: www.zhengxianqian.club:8088
basePath: /
schemes:
- https
paths:
  /user/session:
    post:
      tags:
      - user
      summary: Users login
      description: Users login
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/LoginCode'
      responses:
        200:
          description: OK, return the user's info and proveState.
          schema:
            $ref: '#/definitions/UserInfo'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /user/info:
    put:
      tags:
      - user
      summary: User modify his basic info.
      parameters:
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/UserInfoWithoutId'
      responses:
        200:
          description: modify success
          schema:
            $ref: '#/definitions/UserInfo'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /user/proof:
    get:
      tags:
      - user
      summary: get user's indentity info
      parameters:
      - name: userId
        in: query
        required: true
        type: string
      responses:
        200:
          description: OK, return the user indentity info
          schema:
            $ref: '#/definitions/IdenInfoWithCredit'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
      - user
      summary: User provide his prove identity.
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/IdenInfo'
      responses:
        200:
          description: OK, set creditScore 100.
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /user/{userId}/proof/state:
    get:
      tags:
      - user
      summary: User get his proveState.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      responses:
        200:
          description: check success
          schema:
            $ref: '#/definitions/ProveState'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /user/{userId}/balance:
    get:
      tags:
      - user
      summary: User get the balance.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      responses:
        200:
          description: publish success
          schema:
            $ref: '#/definitions/Balance'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
      - user
      summary: User recharge.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      - name: money
        in: query
        required: true
        type: string
      responses:
        200:
          description: recharge success
          schema:
            $ref: '#/definitions/Balance'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /groups:
    get:
      tags:
      - group
      summary: User get the all group.
      responses:
        200:
          description: create success
          schema:
            $ref: '#/definitions/Groups'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /group/{userId}:
    get:
      tags:
      - group
      summary: User get his join or created group.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      responses:
        200:
          description: get success
          schema:
            $ref: '#/definitions/MyGroup'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
      - group
      summary: User creates the group.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      - name: groupName
        in: query
        required: true
        type: string
      responses:
        200:
          description: create success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
      - group
      summary: User joins the task.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      - name: groupName
        in: query
        required: true
        type: string
      responses:
        200:
          description: join success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
      - group
      summary: User quits the task.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      - name: groupName
        in: query
        required: true
        type: string
      responses:
        200:
          description: quit success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /tasks:
    get:
      tags:
      - task
      summary: Returns all related tasks according to the pageId.
      description: Returns the published tasks, the max number is 10. If the page is the last page, the return all left.
      parameters:
      - name: pageId
        in: query
        description: Page number
        required: true
        type: integer
        default: 0
      - name: type
        in: query
        description: default, recommend, easy
        required: false
        type: string
        default: default
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /task/{userId}:
    get:
      tags:
      - task
      summary: Returns all his own published or accepted tasks in the page.
      description: Returns the published tasks, the max number is 10. If the page is the last page, the return all left.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      - name: type
        in: query
        required: true
        type: string
        description: acceptment or publishment
      responses:
        200:
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
      - task
      summary: User publish the task.
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/TaskDetail'
      responses:
        200:
          description: receive success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /task/{taskId}/info:
    get:
      tags:
      - task
      summary: Returns one task's detail
      description: Returns one task's detail
      parameters:
      - name: taskId
        in: path
        description: The task's id in database.
        required: true
        type: string
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/TaskDetailWithPublisher'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
      - task
      summary: Publisher add the task info.
      parameters:
      - name: taskId
        in: path
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/ExtraTaskInfo'
      responses:
        200:
          description: add success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
      - task
      summary: Publisher abort the task.
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      parameters:
      - name: taskId
        in: path
        required: true
        type: string
      - name: userId
        in: query
        required: true
        type: string
      responses:
        200:
          description: abort success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /task/{taskId}/accepter:
    get:
      tags:
      - task
      summary: Publisher get the info of accepters
      parameters:
      - name: taskId
        in: path
        required: true
        type: string
      - name: userId
        in: query
        required: true
        type: string
        description: the userId of publisher
      responses:
        200:
          description: receive success
          schema:
            type: array
            items:
              $ref: '#/definitions/UserInfoWithTel'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
      - task
      summary: User accept the task.
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      parameters:
      - name: taskId
        in: path
        required: true
        type: string
      - name: userId
        in: query
        required: true
        type: string
        description: the userId of user ready to accept
      responses:
        200:
          description: accept success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
      - task
      summary: Accepter abandon the task.
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      parameters:
      - name: taskId
        in: path
        required: true
        type: string
      - name: userId
        in: query
        required: true
        type: string
        description: the userId of accepter
      responses:
        200:
          description: abandon success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /task/{taskId}/job:
    post:
      tags:
      - task
      summary: User commit the job.
      parameters:
      - name: taskId
        in: path
        required: true
        type: string
      - name: body
        in: body
        required: true
        schema:
          $ref: '#/definitions/Cert'
      responses:
        200:
          description: complete success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    get:
      tags:
      - task
      summary: User get all the Job.
      parameters:
      - name: taskId
        in: path
        required: true
        type: string
      - name: userId
        in: query
        required: true
        type: string
      responses:
        200:
          description: complete success
          schema:
            type: array
            items:
              $ref: '#/definitions/Cert'
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
      - task
      summary: Publisher agree the job of the user.
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      parameters:
      - name: taskId
        in: path
        required: true
        type: string
      - name: userId
        in: query
        required: true
        type: string
      - name: state
        in: query
        required: true
        type: string
        description: agree, reject
      responses:
        200:
          description: success
        400:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /image:
    post:
      tags:
      - 'System'
      summary: 'upload image'
      consumes:
      - 'multipart/form-data'
      parameters:
      - in: 'formData'
        name: 'image'
        type: 'file'
        description: 'image'
        required: true
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Url'
        400:
          description: 'Error'
          schema:
            $ref: '#/definitions/ErrorResponse'
definitions:
  ErrorResponse:
    type: object
    properties:
      message:
        type: string
  LoginCode:
    properties:
      js_code:
        description: user's js_code
        type: string
      app_id:
        description: miniprogram app_id
        type: string
      app_secret:
        description: miniprogram app_secret
        type: string
      encryptedData:
        description: user's encryptedData when he/she has authensized getUserInfo
        type: string
  UserInfo:
    properties:
      userId:
        type: string
      nickName:
        type: string
      avatarUrl:
        type: string
      proveState:
        type: string
  UserInfoWithoutId:
    properties:
      nickName:
        type: string
      avatarUrl:
        type: string
  IdenInfo:
    properties:
      name:
        type: string
      sex:
        type: string
      idenType:
        type: string
      tel:
        type: string
      school:
        type: string
      company:
        type: string
      id:
        type: string
        description: student id or worker id
      cert:
        description: user's cert path
        type: string
  Balance:
    properties:
      balance:
        type: number
  Groups:
    type: array
    items:
      type: object
      properties:
        groupId: 
          type: string
        groupName: 
          type: string
        groupDesc:
          type: string
        groupIcon:
          type: string
  MyGroup:
    properties:
      created:
        $ref: '#/definitions/Groups'
      joined:
        $ref: '#/definitions/Groups'
  Task:
    properties:
      id:
        type: string
      icon:
        type: string
        description: the issuer's head pic
      title:
        type: string
      desc:
        type: string
      money:
        type: number
      maxNum:
        type: integer
      partNum:
        type: integer
        description: the num of participants.
      isCommited:
        type: boolean
  TaskDetail:
    properties:
      type:
        type: string
      wjxId:
        type: string
        description: if the type is 'wjx', return wjxId.
      title:
        type: string
      desc:
        type: string
      time:
        type: string
      money:
        type: number
      maxNum:
        type: integer
      partNum:
        type: integer
        description: the num of participants.
      condition:
        $ref: '#/definitions/Condition'
  ExtraTaskInfo:
    properties:
      userId:
        type: string
      content:
        type: string
  UserInfoWithTel:
    properties:
      userId:
        type: string
      avatarUrl:
        type: string
      nickName:
        type: string
      tel:
        type: string
  Cert:
    type: object
    properties:
      userId: 
        type: string
      files:
        type: array
        items:
          type: string
      remarks:
        type: string
  Condition:
    properties:
      groups:
        type: array
        items:
          type: string
      sex:
        type: string
      creditScore:
        type: integer
  IdenInfoWithCredit:
    properties:
      idenInfo:
        $ref: '#/definitions/IdenInfo'
      creditScore:
        type: integer
  ProveState:
    properties:
      proveState:
        type: string
  TaskDetailWithPublisher:
    properties:
      user:
        $ref: '#/definitions/UserInfoWithTel'
      content:
        $ref: '#/definitions/TaskDetail'
      hasReceived:
        type: integer
        description: 0 stands for hasn't, 1 stands for has received, 2 stands for under review, 3 stands for has completed
  Url:
    type: 'object'
    properties:
      url:
        type: 'string'